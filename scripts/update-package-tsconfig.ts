/*
 * Copyright 2020-present ula-aca
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// taken from: https://github.com/hanpama/typescript-composite-lerna/blob/75ea65cb202f1449632ad1eb5060ec20a660c77b/scripts/update-package-tsconfig.ts

import { spawnSync } from 'child_process'
import * as fs from 'fs'
import * as path from 'path'
import * as prettier from 'prettier'

const PACKAGE_BUILD_TSCONFIG = 'tsconfig.json'
const TSCONFIG_COMMENT = `// GENERATED by update-package-tsconfig\n`

const packageDirectories = spawnSync('./node_modules/.bin/lerna', [
  'ls',
  '--all',
  '--parseable'
])
  .stdout.toString()
  .trim()
  .split('\n')

type DirectoryName = string
type PackageName = string

const packageJSONMap: Map<
  PackageName,
  {
    name: string
    dependencies: { [packageName: string]: string }
    devDependencies: { [packageName: string]: string }
  }
> = new Map()

const packageDirPathMap: Map<PackageName, DirectoryName> = new Map()

packageDirectories.forEach((packageDirPath) => {
  const packageJSONPath = path.join(packageDirPath, 'package.json')
  const packageJSONData = JSON.parse(
    fs.readFileSync(packageJSONPath).toString()
  )
  const packageName = packageJSONData.name
  packageDirPathMap.set(packageName, packageDirPath)
  packageJSONMap.set(packageName, packageJSONData)
})

const internalDependencyMap: Map<string, string[]> = new Map()
packageDirPathMap.forEach((_packageDirPath, packageName) => {
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  const { dependencies, devDependencies } = packageJSONMap.get(packageName)!

  const internalDependencies = [
    ...(dependencies ? Object.keys(dependencies) : []),
    ...(devDependencies ? Object.keys(devDependencies) : [])
  ].filter((dep) => packageDirPathMap.has(dep))

  internalDependencyMap.set(packageName, internalDependencies)
})

function resolveInternalDependencies(dependencies: string[]): string[] {
  const childDeps = []

  // eslint-disable-next-line no-restricted-syntax
  for (const idep of dependencies) {
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    const deps = internalDependencyMap.get(idep)!
    const res = resolveInternalDependencies(deps)
    // eslint-disable-next-line no-restricted-syntax
    for (const jdep of res) {
      childDeps.push(jdep)
    }
  }
  const resolved = childDeps.concat(dependencies)
  // remove all duplicated after the first appearance
  return resolved.filter((item, idx) => resolved.indexOf(item) === idx)
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
function stringify(value: any): string {
  return prettier.format(JSON.stringify(value), {
    parser: 'json'
  })
}

packageDirPathMap.forEach((packageDirPath, packageName) => {
  const tsconfigBuildPath = path.join(packageDirPath, PACKAGE_BUILD_TSCONFIG)

  const internalDependencies = resolveInternalDependencies(
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    internalDependencyMap.get(packageName)!
  )

  const tsconfigData = {
    extends: '../../config/tsconfig.base.json',
    compilerOptions: {
      outDir: 'lib',
      rootDir: 'src',
      composite: true
    },
    references: internalDependencies.map((dep) => {
      return {
        path: path.relative(
          packageDirPath,
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
          path.join(packageDirPathMap.get(dep)!, PACKAGE_BUILD_TSCONFIG)
        )
      }
    }),
    include: ['src'],
    exclude: ['tests', 'lib', 'examples']
  }

  fs.writeFileSync(
    tsconfigBuildPath,
    TSCONFIG_COMMENT + stringify(tsconfigData)
  )
})

name: Continuous Integration

on: [push]

jobs:
  style:
    name: Style
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn

      - name: Build
        run: yarn build

      - name: Lint commit messages
        run: yarn commitlint

      - name: Lint files with eslint
        run: yarn lint

      - name: Check formatting with prettier
        run: yarn prettier

  types:
    name: Types
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn

      - name: Check Types
        # This also checks examples and tests folder for typescript errors
        run: yarn types

  unit-test:
    name: Unit Tests
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        node: [10, 12]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{matrix.node}}

      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn

      - name: Build
        run: yarn build

      - name: Run unit tests
        run: yarn test:unit

      - name: Publish code coverage
        uses: paambaati/codeclimate-action@v2.3.0
        with:
          coverageCommand: yarn coverage --check-coverage false
        # Also publish when tests fail
        if: always()
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}

  stryker-tests:
    name: Stryker Mutation tests
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn

      - name: Build
        run: yarn build

      - name: Run Stryker tests
        env:
          STRYKER_DASHBOARD_API_KEY: ${{ secrets.STRYKER_DASHBOARD_API_KEY }}
        run: yarn test:stryker

  integration-test:
    runs-on: ubuntu-18.04
    name: Integration Tests
    steps:
      - name: Checkout ula-aca-plugins
        uses: actions/checkout@v2

      - name: Checkout von-network
        uses: actions/checkout@v2
        with:
          repository: bcgov/von-network
          path: von-network
          ref: e92f15194fad5a56ac301a25f9f1d43b42470bfb

      - name: Setup VON Network
        run: |
          cd von-network
          git apply ../network-setup/fix_von_network_manage_log.patch
          ./manage build
          ./manage start

      - name: Run aca-py and aca-whr
        run: docker-compose -f network-setup/docker-compose.yml up -d --force-recreate

      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Install dependencies
        run: yarn

      - name: Run Integration Tests
        run: DOTENV_CONFIG_PATH=.env.test yarn test:integration

      - name: Export docker logs
        if: always()
        run: |
          mkdir logs
          docker-compose -f network-setup/docker-compose.yml logs --no-color > logs/docker-aca-log.txt
          cd von-network
          ./manage logs > ../logs/docker-von-log.txt

      - uses: actions/upload-artifact@v1
        if: always()
        with:
          name: docker-logs
          path: logs

  release:
    name: Release
    runs-on: ubuntu-18.04
    # Only release on master
    if: github.ref == 'refs/heads/master'
    needs: [style, types, unit-test, integration-test]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12
          registry-url: 'https://registry.npmjs.org'

      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn

      - name: Build
        run: yarn build

      - name: Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_ACTOR: ${{ github.actor }}
          NPM_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
        run: sh ./scripts/publish-packages.sh
